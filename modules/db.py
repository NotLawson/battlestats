import os, sys, time
import hashlib
import hmac
import psycopg2, json
from datetime import datetime

## DATABASE SETUP ##
from psycopg2.extras import Json
from psycopg2.extensions import register_adapter
register_adapter(dict, Json)


# Directly from https://stackoverflow.com/questions/9594125/salt-and-hash-a-password-in-python
def hash_new_password(password: str) -> tuple[bytes, bytes]:
    """
    Hash the provided password with a randomly-generated salt and return the
    salt and hash to store in the database.
    """
    salt = os.urandom(16)
    pw_hash = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)
    return salt, pw_hash

def is_correct_password(salt: bytes, pw_hash: bytes, password: str) -> bool:
    """
    Given a previously-stored salt and hash, and a password provided by a user
    trying to log in, check whether the password is correct.
    """
    return hmac.compare_digest(
        pw_hash,
        hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)
    )

class Database:
    def __init__(self, host, port, user, password, logger):
        self.logger = logger

        self.logger.info("Connecting to database...")
        self.conn = psycopg2.connect(
            host=host,
            database="battlestats",
            user=user,
            password=password,
            port=port
        )
        self.logger.info("Connected to database")
        self.conn.autocommit = True
        self.cursor = self.conn.cursor()

        self.setup()

    def setup(self):
        '''
        Sets up the database for FTU
        '''
        self.logger.info("Setting up database...")

        ## TABLE CREATION ##
        ## Users table
        # - id: User id
        # - username: Username
        # - password: hash of password. the password is never given to the server, the hash is generated by the client side and 
        #   then sent to the server. This protects the user's password in the event of a database breach
        # - salt: The salt used to hash the password. This is used to protect the user's password in the event of a database breach.
        # - email: email used for communication with the user
        # - token: The battletabs user token. The user will generate the token client side (again, no credentials going to the server) and
        #   then send it to the server. This allows us to support Discord, Google and Apple login ontop of user/password (hopefully, I will
        #   investigate this later)
        # - battletabs_id: The battletabs user id. This is used to identify the user in the battletabs API
        # - battletabs_username: The battletabs username. This is used to identify the user and find their id.
        # - fleets: The fleets the user has. This is an array of fleet ids.
        # - flags: specifies the account type, as well as warnings, bans, moderation and admin:
        #   - standard: Standard user account. has an email, has a valid token
        #   - ghost: Ghost account. This is used for players without an actual account on the platform. Does not have an email or a valid token, is unable to login, and has reduced stats. They are not eligible for auto stat refresh.
        #   - system: System account. Does not have an email or a valid token. This is used for stuff like admin accounts etc
        #   - bot: This user is a bot. This will apply a visual tag to the user's profile in the client. They will not be able to login to the main client, but will be able login to the bot manager user interface and use the API. This is used for moderation purposes.
        #   - banned: The user is banned from the platform. They will not be able to login or use the API. This is used for moderation purposes. This will apply a visual tag to the user's profile in the client.
        #   - warning: The user has a warning. This is used for moderation purposes. The user can still login and use the API.
        #   - moderator: The user is a moderator. This is used for moderation purposes. This will apply a visual tag to the user's profile in the client.
        #   - admin: The user is an admin. This is used for moderation purposes. This will apply a visual tag to the user's profile in the client.
        #   - fleetmod: The user is a fleet moderator. This is used for moderation purposes. This will apply a visual tag to the user's profile in the client.
        #   - vip: This forces the user to auto refresh their stats (as with an active account) no matter their other flags. For example, vip may be applied to a ghost account to refresh stats at a regular basis. This also applies a visual tag to the user's profile in the client.
        #   - tester: The user is a test account. This is used for development purposes. This will allow the user to apply option and settings still in development for testing purposes. This will also apply a visual tag to the user's profile in the client.
        #   - active: The user is an active account. This is used to determine whether the user is eligible for auto stat refresh. This cannot be used in conjunction with the inactive flag. This will be applied automatically when is is detected that the user has logged in or participated in a battle. It lasts 48 hours after the last activity.
        #   - inactive: The user is an inactive account. This is used to determine whether the user is eligible for auto stat refresh. This cannot be used in conjunction with the active flag. This will be applied automatically when is is detected that the user has not logged in or participated in a battle for 48 hours. It will be removed when the user logs in or participates in a battle.
        # - last_login: The last time the user logged in. This is used for moderation purposes.
        # - account_created: The time the account was created. This is used for moderation purposes.
        self.logger.info("Setting up users table...")
    
        try: 
            self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS users(
                        id serial primary key,
                        username varchar(50) unique not null,
                        password varchar(255) not null,
                        salt varchar(255) not null,
                        email varchar(50) unique,
                        token text,
                        battletabs_id text,
                        battletabs_username text,
                        fleets text[],
                        flags text[],
                        last_login timestamp,
                        account_created timestamp
                        )
            ''')
            self.logger.info("Users table created")
        except Exception:
            self.logger.info("Users table already exists, moving on...")

        ## Sessions table
        # - user_id: The id of the user that owns the session.
        # - token: The session token. This is used to identify the user in the database.
        # - created: The time the session was created. This is used to determine if the session is still valid.
        # - last_used: The time the session was last used. This is used to determine if the session is still valid.
        # - name: The name of the session. This is used to identify the session in the client.
        self.logger.info("Setting up sessions table...")
        try:
            self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS sessions(
                        user_id integer references users(id),
                        token text primary key,
                        created timestamp,
                        last_used timestamp,
                        name text
                        )
            ''')
            self.logger.info("Sessions table created")
        except Exception:
            self.logger.info("Sessions table already exists, moving on...")

        ## News Table
        # - id: The id of the news item.
        # - title: The title of the news item.
        # - author: the user id of the author. The BattleTabs API will have it's own system account to handle this and other tasks.
        # - content: The content of the news item.
        # - date: The date the news item was created.
        # - tags: The tags of the news item. This is used to filter news items by type.
        #   - patch: The news item is a patch note from BattleTabs.
        #   - event: The news item is an event from BattleTabs or the Discord.
        #   - announcement: The news item is an announcement BattleTabs.
        #   - battlestats_patch: The news item is a patch note for Battlestats.
        #   - battlestats_announcement: The news item is an announcement for Battlestats.
        self.logger.info("Setting up news table...")
        try:
            self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS news(
                        id serial primary key,
                        title text,
                        author integer references users(id),
                        content text,
                        date timestamp,
                        tags text[]
                        )
            ''')
            self.logger.info("News table created")
        except Exception:
            self.logger.info("News table already exists, moving on...")

        ## Stats Table
        # When updating this table, the task runner will create another row with a different timestamp. This allows us to keep track of historical data.
        # - user_id: the user id that the stats belong to
        # - wins: amount of wins;
        # - losses: amount of losses;
        # - winrate: winrate
        # - games_played: amount of games played
        # - league: the amount of trophies the user currently has. this can be used to calculate the current rank of a user
        # - diamonds: the amount of diamonds the user has.
        # - gold: the amount of gold the user has.
        # - gems: the amount of gems the user has.
        # - from: the time the stats were taken. This is used to determine if the stats are up to date, or if it's been long enough since the last stats update.
        self.logger.info("Setting up stats table...")
        try:
            self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS stats(
                        user_id integer references users(id),
                        wins integer,
                        losses integer,
                        winrate float,
                        games_played integer,
                        league integer,
                        diamonds integer,
                        gold integer,
                        gems integer,
                        time timestamp
                        )
            ''')
            self.logger.info("Stats table created")
        except Exception:
            self.logger.info("Stats table already exists, moving on...")

        ## Ships Table
        # This is a static table used to store ships metadata.
        # - definition_id: The id of the ship in the battletabs API.
        # - name: The name of the ship.
        # - type: The type of the ship.
        #   - attacker: Attacker ship
        #   - sonar: Sonar ship
        #   - revealer: Revealer ship
        #   - special: Special ship
        # - cd: The cooldown of the ship.
        # - ability: The description of the ship's ability from the game.
        # - dpt: The damage per turn of the ship as defined by HeavenlySome's BattleTabs damage table. This is a json snippet containing all the DPT stats.
        # - skins: An array of skin ids that the ship has.
        # - health: The amount of tiles the ship owns.
        # - tags: The tags of the ship. This can be used to filter ships by skills.
        #   - big: The ship is big.
        #   - small: The ship is small.
        # - last_updated: The last time the ship was updated. This is used to determine if the ship is up to date.
        self.logger.info("Setting up ships table...")
        try:
            self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS ships(
                        definition_id text primary key unique,
                        name text,
                        type text,
                        cd integer,
                        ability text,
                        dpt json,
                        skins text[],
                        health integer,
                        tags text[]
                        )
            ''')
            self.logger.info("Ships table created")
        except Exception:
            self.logger.info("Ships table already exists, moving on...")

        ## Items Table
        # This is a static table used to store items metadata.
        # - id: The id of the item in the battletabs API.
        # - name: The name of the item.
        # - type: The type of the item.
        #   - cosmetic: cosmetic item
        #   - skin: Skin
        # - description: The description of the item.
        self.logger.info("Setting up items table...")
        try:
            self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS items(
                        id text primary key,
                        name text,
                        type text,
                        description text
                        )
            ''')
            self.logger.info("Items table created")
        except Exception:
            self.logger.info("Items table already exists, moving on...")

        ## Fleets Table
        # - id: The id of the fleet.
        # - name: The name of the fleet.
        # - owner_id: The id of the user that owns the fleet.
        # - description: The description of the fleet.
        # - ships: The ships in the fleet. This is an array of ship ids.
        # - tags: The tags of the fleet. This is an array of tags that can be used to filter fleets by skills.
        #   - big: The fleet is big.
        #   - small: The fleet is small.
        #   - fast: The fleet is fast.
        #   - slow: The fleet is slow.
        # - type: The type of the fleet (2a2r etc)
        # - dpt: The damage per turn of the fleet as defined by HeavenlySome's BattleTabs damage table.
        # - wins: The amount of wins the fleet has.
        # - losses: The amount of losses the fleet has.
        # - winrate: The winrate of the fleet.
        # - games_played: The amount of games played with the fleet.
        # - health: The amount of tiles the fleet owns.
        # - last_updated: The last time the fleet was updated.
        self.logger.info("Setting up fleets table...")
        try:
            self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS fleets(
                        id serial primary key,
                        name text,
                        owner_id integer references users(id),
                        description text,
                        ships text[],
                        tags text[],
                        type text,
                        dpt float,
                        wins integer,
                        losses integer,
                        winrate float,
                        games_played integer,
                        last_updated timestamp,
                        health integer
                        )
            ''')
            self.logger.info("Fleets table created")
        except Exception:
            self.logger.info("Fleets table already exists, moving on...")
        
        ## Inventory Table
        # - user_id: The id of the user that owns the inventory.
        # - ships: The ships in the inventory. This is an array of ship ids.
        # - skins: The skins in the inventory. This is an array of skin ids.
        # - cosmetics: The cosmetics in the inventory. This is an array of cosmetic ids.
        # - medals: The medals in the inventory. This is an array of medal ids.
        # - last_updated: The last time the inventory was updated.
        self.logger.info("Setting up inventory table...")
        try:
            self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS inventory(
                        user_id integer references users(id),
                        ships text[],
                        skins text[],
                        cosmetics text[],
                        medals text[],
                        last_updated timestamp
                        )
            ''')
            self.logger.info("Inventory table created")
        except Exception:
            self.logger.info("Inventory table already exists, moving on...")

        ## Battles Table
        # - id: The id of the battle. This is set by the BattleTabs API.
        # - first_player_id: The id of the first player. This is their battletabs id.
        # - second_player_id: The id of the second player. This is their battletabs id.
        # - winner_id: The id of the winner. This is their battletabs id.
        # - first_player_fleet: The fleet of the first player. This is an array of ship ids.
        # - first_player_fleet_id: The fleet id of the first player.
        # - second_player_fleet: The fleet of the second player. This is an array of ship ids.
        # - second_player_fleet_id: The fleet id of the first player.
        # - map: The map of the battle. This is a map_id from the BattleTabs API.
        # - type: The type of the battle. This is a string that can be used to filter battles by type
        #   - short: The battle was short.
        #   - long: The battle was long.
        # - ranked: The battle was a ranked battle. This is a boolean value.
        # - start_time: The time the battle started.
        # - end_time: The time the battle ended.
        # - turns: The amount of turns the battle lasted.
        self.logger.info("Setting up battles table...")
        try:
            self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS battles(
                        id text primary key,
                        first_player_id text,
                        second_player_id text,
                        winner_id text,
                        first_player_fleet text[],
                        first_player_fleet_id integer references fleets(id),
                        second_player_fleet text[],
                        second_player_fleet_id integer references fleets(id),
                        map text,
                        type text,
                        ranked boolean,
                        start_time timestamp,
                        end_time timestamp,
                        turns integer
                        )
            ''')
            self.logger.info("Battles table created")
        except Exception:
            self.logger.info("Battles table already exists, moving on...")
        

    def execute(self, query, params=None):
        self.cursor.execute(query, params)
        try: 
            return self.cursor.fetchone()
        except:
            return None
    def execute_fetch_all(self, query, params=None):
        self.cursor.execute(query, params)
        try: 
            return self.cursor.fetchall()
        except:
            return None

    def execute_many(self, query, params=None):
        self.cursor.executemany(query, params)
        try: 
            return self.cursor.fetchall()
        except:
            return None
        
    
    def get_session(self, session_token):
        '''
        Gets the session from the database
        '''
        self.cursor.execute("UPDATE sessions SET last_used = %s WHERE token = %s", (datetime.now(), session_token))
        self.cursor.execute("SELECT  user_id FROM sessions WHERE token = %s", (session_token,))
        return self.cursor.fetchone()
    def create_session(self, user_id, name):
        '''
        Creates a session in the database
        '''
        token = os.urandom(32).hex()
        self.cursor.execute("INSERT INTO sessions (user_id, token, created, last_used, name) VALUES (%s, %s, %s, %s, %s)", (user_id, token, datetime.now(), datetime.now(), name))
        return token
    def get_session_silent(self, session_token):
        '''
        Gets the session from the database without logging
        '''
        self.cursor.execute("SELECT * FROM sessions WHERE token = %s", (session_token,))
        return self.cursor.fetchone()
    def delete_session(self, session_token):
        '''
        Deletes a session from the database
        '''
        self.cursor.execute("DELETE FROM sessions WHERE token = %s", (session_token,))
    
    def get_user_authed(self, username, password):
        '''
        Gets the user from the database. Updates the last_login
        '''
        self.cursor.execute("SELECT salt, password FROM users WHERE username = %s", (username,))
        data = self.cursor.fetchone()
        if not data:
            return None
        salt, pw_hash = data
        salt, pw_hash = bytes.fromhex(salt), bytes.fromhex(pw_hash)
        if not is_correct_password(salt, pw_hash, password):
            return False
        self.cursor.execute("SELECT * FROM users WHERE username = %s", (username,))
        return self.cursor.fetchone()
    def get_user_by_id(self, user_id):
        '''
        Gets the user from the database by id
        '''
        self.cursor.execute("SELECT * FROM users WHERE id = %s", (user_id,))
        return self.cursor.fetchone()
    def get_user_by_username(self, username):
        '''
        Gets the user from the database by username
        '''
        self.cursor.execute("SELECT * FROM users WHERE username = %s", (username,))
        return self.cursor.fetchone()
    def get_user_by_email(self, email):
        '''
        Gets the user from the database by email
        '''
        self.cursor.execute("SELECT * FROM users WHERE email = %s", (email,))
        return self.cursor.fetchone()
    def get_user_by_battletabs_id(self, battletabs_id):
        '''
        Gets the user from the database by battletabs id
        '''
        self.cursor.execute("SELECT * FROM users WHERE battletabs_id = %s", (battletabs_id,))
        return self.cursor.fetchone()
    def get_user_by_battletabs_username(self, battletabs_username):
        '''
        Gets the user from the database by battletabs username
        '''
        self.cursor.execute("SELECT * FROM users WHERE battletabs_username = %s", (battletabs_username,))
        return self.cursor.fetchone()
    
    def create_user(self, username, password, email, battletabs_token, battletabs_id, battletabs_username, fleets, flags):
        '''
        Creates a user in the database
        '''
        salt, hash = hash_new_password(password)

        self.cursor.execute("INSERT INTO users (username, password, salt, email, token, battletabs_id, battletabs_username, fleets, flags, last_login, account_created) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)", 
                                               (username, hash.hex(), salt.hex(), email, battletabs_token, battletabs_id, battletabs_username, fleets, flags, datetime.now(), datetime.now()))
    def update_user(self, user_id, username=None, password=None, email=None):
        if username:
            self.cursor.execute("UPDATE users SET username = %s WHERE id = %s", (username, user_id))
        if password:
            salt, hash = hash_new_password(password)
            self.cursor.execute("UPDATE users SET password = %s, salt = %s WHERE id = %s", (hash.hex(), salt.hex(), user_id))
        if email:
            self.cursor.execute("UPDATE users SET email = %s WHERE id = %s", (email, user_id))
        
    def get_user_flags(self, user_id):
        '''
        Gets the user flags from the database
        '''
        self.cursor.execute("SELECT flags FROM users WHERE id = %s", (user_id,))
        data = self.cursor.fetchone()
        if not data:
            return None
        return data[0]
    def set_user_flags(self, user_id, flags):
        '''
        Sets the user flags in the database
        '''
        self.cursor.execute("UPDATE users SET flags = %s WHERE id = %s", (flags, user_id))
